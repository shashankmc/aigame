(define "EnemyAround"
    (not
        (all Sites
            (sites Around (from) All)
            if:(not (is Enemy (who at:(site))))
        )
    )
)
(define "StepCapture" (move Step (directions {FR FL Forward Leftward Rightward} of:All) 
                        (to if:( 
                                    (is Enemy (who at:(to)))
                                )
                        (apply (remove (to)))
                        )
                      )
)
(define "StepDiagonalForward"
    (move Step (directions {FR FL Forward} of:All)
        (to if:(or
            (is Empty(to))
            (is Enemy (who at:(to))))
        (apply (remove (to)))
        )
    )
)
(define "StepBackward" 
    (move Slide (directions {BR BL Backwards} of:All)
        (to
            if:(and
                (is Empty (to)) 
                )
        )
    )
)
(define "Retreat"
    (hop (directions {BR BL Backwards} of:All)
        (between if:(is Empty (who at:(between))))
        (to if:(is Empty(to)))
    )
)
(define "IsBehindAPawn" (= (id "Pawn" Mover) (what at:("AheadSite"))))
(define "AheadSite" (ahead (from) #1 (directions Vertex from:(from) to:(to))))
(define "FireInTheHole"
    (forEach Direction All
        (if
           (and ("IsBehindAPawn") (is Empty ("AheadSite" steps:2)))
//           (and ("IsBehindTwoPawns") (is Empty ("AheadSite" steps:2)))
            (if
                (is Enemy (who at:("AheadSite" steps:3)))
                (move Remove ("AheadSite" steps:3))
            )
        )
    )
)
(define "ImmaJump"
    (move Hop (directions {Forwards Leftwards Backwards} of:All)
        (between before:0 (range 2)
            if:(is Friend (who at:(between)))
        )
        (to if:(is Empty(to)))
    )
)
(define "ReachedTarget" (is In (last To) (sites Mover)))
(define "NoMoves" (if (no Moves Next) (result Next #1)))
(game "Cannon"
    (players { (player N) (player S) })
    (equipment
        {
            (board (square 10) use:Vertex)
            (piece "Pawn"
               Each (or {
                                //("StepBackward")
                                ("StepCapture")
                                ("ImmaJump")
                                ("StepDiagonalForward")
                                (if ("EnemyAround") ("Retreat"))
                                ("FireInTheHole")
                        })    
            )
            
            (hand Each)
            
            (regions P1 (expand (sites Top)))
            (regions P2 (expand (sites Bottom)))
            (regions "P1P" (sites { "A3" "C3" "E3" "G3" "I3" "A2" "C2" "E2" "G2" "I2" "A4" "C4" "E4" "G4" "I4"}))
            (regions "P2P" (sites { "B9" "D9" "F9" "H9" "J9" "B8" "D8" "F8" "H8" "J8" "B7" "D7" "F7" "H7" "J7"}))
            (regions "P1CL" (sites { "A1" "B1" "C1" "D1" "E1" "F1" "G1" "H1" "I1" "J1"}))
            (regions "P2CL" (sites { "A10" "B10" "C10" "D10" "E10" "F10" "G10" "H10" "I10" "J10"}))
            (piece "Castle" Each)
        }
    )
    (rules
        (start {
            (place "Pawn1" (sites "P1P"))
            (place "Pawn2" (sites "P2P"))
            (place "Castle1" (handSite P1) count:1)
            (place "Castle2" (handSite P2) count:1)
            //(place "Castle" "Hand" count:1)
        })
        phases:{
            (phase "Opening"
               (play (move (from (handSite Mover)) (to (if (is Mover P1) (sites "P1CL") (sites "P2CL")))))
               (nextPhase Mover ("HandEmpty" Mover) "Playing")
            )
            (phase "Playing"
                (play
                    (or
                        (if (is Occupied (handSite Mover))
                            (move
                                (from (handSite Mover))
                                (to (expand (sites Next) steps:2) if:(is Empty (to))) 
                            )
                        ) 
                        (forEach Piece)
                    )
                )
            )
        }
        
        (end (if (or 
                        ("ReachedTarget" (result Mover Win)))
                        ("NoMoves" Loss (result Mover Win))
                    )
                )
    )
)







